<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="org.fh.mapper.dsno1.fhoa.CustomerMapper">
	
	<!--表名 -->
	<sql id="tableName">
		OA_CUSTOMER
	</sql>
	
	<!--数据字典表名 -->
	<sql id="dicTableName">
		SYS_DICTIONARIES
	</sql>
	
	<!-- 字段 -->
	<sql id="Field">
		f.NAME,	
		f.TEL,	
		f.ADDRESS,	
		f.EMAIL,	
		f.WEIXIN,	
		f.LEVEL,	
		f.REMARKS,	
		f.USERNAME,	
		f.CUSTOMER_ID
	</sql>
	
	<!-- 字段用于新增 -->
	<sql id="Field2">
		NAME,	
		TEL,	
		ADDRESS,	
		EMAIL,	
		WEIXIN,	
		LEVEL,	
		REMARKS,	
		USERNAME,	
		CUSTOMER_ID
	</sql>
	
	<!-- 字段值 -->
	<sql id="FieldValue">
		#{NAME},	
		#{TEL},	
		#{ADDRESS},	
		#{EMAIL},	
		#{WEIXIN},	
		#{LEVEL},	
		#{REMARKS},	
		#{USERNAME},	
		#{CUSTOMER_ID}
	</sql>
	
	<!-- 新增-->
	<insert id="save" parameterType="pd">
		insert into 
	<include refid="tableName"></include>
		(
	<include refid="Field2"></include>
		) values (
	<include refid="FieldValue"></include>
		)
	</insert>
	
	<!-- 删除-->
	<delete id="delete" parameterType="pd">
		delete from
		<include refid="tableName"></include>
		where 
			CUSTOMER_ID = #{CUSTOMER_ID}
	</delete>
	
	<!-- 修改 -->
	<update id="edit" parameterType="pd">
		update
		<include refid="tableName"></include>
		set 
			NAME = #{NAME},
			TEL = #{TEL},
			ADDRESS = #{ADDRESS},
			EMAIL = #{EMAIL},
			WEIXIN = #{WEIXIN},
			LEVEL = #{LEVEL},
			REMARKS = #{REMARKS},
			CUSTOMER_ID = CUSTOMER_ID
		where 
			CUSTOMER_ID = #{CUSTOMER_ID}
	</update>
	
	<!-- 通过ID获取数据 -->
	<select id="findById" parameterType="pd" resultType="pd">
		select 
		<include refid="Field"></include>
		from 
		<include refid="tableName"></include> f
		where 
			f.CUSTOMER_ID = #{CUSTOMER_ID}
	</select>
	
	<!-- 列表 -->
	<select id="datalistPage" parameterType="page" resultType="pd">
		select
		<include refid="Field"></include>
		from 
		<include refid="tableName"></include> f
		where 1=1
		<if test="pd.KEYWORDS != null and pd.KEYWORDS != ''"><!-- 关键词检索 -->
			and
				(
					f.NAME LIKE CONCAT(CONCAT('%', #{pd.KEYWORDS}),'%')
					 or 
					f.REMARKS LIKE CONCAT(CONCAT('%', #{pd.KEYWORDS}),'%')
					or 
					f.TEL LIKE CONCAT(CONCAT('%', #{pd.KEYWORDS}),'%')
					or 
					f.WEIXIN LIKE CONCAT(CONCAT('%', #{pd.KEYWORDS}),'%')
					or 
					f.EMAIL LIKE CONCAT(CONCAT('%', #{pd.KEYWORDS}),'%')
					or 
					f.USERNAME LIKE CONCAT(CONCAT('%', #{pd.KEYWORDS}),'%')
				)
		</if>
		<if test="pd.LEVEL != null and pd.LEVEL != ''"><!-- 级别 -->
			and f.LEVEL = #{pd.LEVEL}
		</if>
		<if test="pd.USERNAME!= null and pd.USERNAME != ''">
			and f.USERNAME = #{pd.USERNAME}
		</if>
	</select>
	
	<!-- 列表(全部) -->
	<select id="listAll" parameterType="pd" resultType="pd">
		select
		<include refid="Field"></include>
		from 
		<include refid="tableName"></include> f
	</select>
	
	<!-- 根据ID组修改数据 -->
	<update id="editByIDs" parameterType="pd">
		update
		<include refid="tableName"></include>
		set 
			USERNAME = #{USERNAME}
		where 
			CUSTOMER_ID in
		<foreach item="item" index="index" collection="IDS" open="(" separator="," close=")">
                 #{item}
		</foreach>
	</update>
	
	<!-- 根据ID组获取数据 -->
	<select id="findListByIDs" parameterType="String" resultType="pd">
		select
		<include refid="Field"></include>
		from
		<include refid="tableName"></include> f
		where 
			f.CUSTOMER_ID in
		<foreach item="item" index="index" collection="array" open="(" separator="," close=")">
                 #{item}
		</foreach>
	</select>
	
	<!-- 批量删除 -->
	<delete id="deleteAll" parameterType="String">
		delete from
		<include refid="tableName"></include>
		where 
			CUSTOMER_ID in
		<foreach item="item" index="index" collection="array" open="(" separator="," close=")">
                 #{item}
		</foreach>
	</delete>
	
	<!-- fh313596790qq(青苔) -->
</mapper>